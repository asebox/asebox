<?xml version="1.0" encoding="UTF-8"?>
<MetricDescriptor>
  <metricName > QPMSQL </metricName>
  <metricType > GENERIC </metricType>
  <SQL > <![CDATA[
set nocount on
declare @dbid int,
@dbidstr varchar(10),
@dbname varchar(30),
@rowcnt int,
@msg varchar(1024)

if (select object_id("tempdb..tmp_QPMSQL_gotten")) is null
begin
   exec ("create table  tempdb..tmp_QPMSQL_gotten 
             (dbid    int,
	            uid     int,
	            id      int,
              hashkey int
             )"
         )
   exec ("create unique clustered index iuc on tempdb..tmp_QPMSQL_gotten (dbid,uid,id,hashkey)")
end

create table #tmp_QPMSQL
(
	dbname varchar(30),
	dbid     int,
	uid      int,
	id      int,
	hashkey int, 
	sequence int,
	qtext varchar (255)	null
	)


select dbid, name into #db_cursor_QPMSQL from master..sysdatabases
where 1=1
		
and status&1    != 1     -- database upgrading
and status&32   != 32    -- database created for load
and status&64   != 64    -- database recovery
and status&256  != 256   -- database suspect
and status&4096 != 4096  -- single user
		
and status2&16  != 16    -- database offline
and status2&32  != 32    -- database offline
and status2&512 != 512   -- database currently upgrading
and status3&2   != 2     -- ignore proxy database
and status3&4   != 4     -- ignore has proxy database
and status3&8   != 8     -- databse in shutdown
and status3&256 != 256   -- ignore user created tempdb
and status3&8192 != 8192 -- drop database in progress
and status3&4194304 != 4194304 -- ignore archive databases
		

		
set rowcount 1
select @dbid=dbid, @dbname=name from #db_cursor_QPMSQL
select @rowcnt=@@rowcount
delete #db_cursor_QPMSQL
set rowcount 0
		
dbcc flushmetrics 
		
while @rowcnt = 1
begin
    select @dbidstr = convert(varchar,@dbid)
    exec (" insert #tmp_QPMSQL select '"+@dbname+"',"+@dbidstr+"
    			  ,uid, id, hashkey, sequence, qtext from "+@dbname
    				+"..sysquerymetrics Q where not exists (select 1 from tempdb..tmp_QPMSQL_gotten G where "+@dbidstr+"=G.dbid and Q.uid=G.uid and Q.id=G.id and Q.hashkey=G.hashkey)")
    		
    set rowcount 1
    select @dbid=dbid, @dbname=name from #db_cursor_QPMSQL
    select @rowcnt=@@rowcount
    delete #db_cursor_QPMSQL
    set rowcount 0
end
		
		
select dbname , uid, id, hashkey , sequence, qtext   
from #tmp_QPMSQL

exec ("insert into tempdb..tmp_QPMSQL_gotten (dbid,uid,id,hashkey) select distinct dbid,uid,id,hashkey from #tmp_QPMSQL")
		
drop table #tmp_QPMSQL
drop table #db_cursor_QPMSQL 
		
]]>
 </SQL>

<key1 >  </key1>
<key2 >  </key2>
<key3 >  </key3>

<filterCol > </filterCol>

<delay > 60 </delay>

<colsCalcDiff >
</colsCalcDiff>

<colsAlias> 
</colsAlias>

<mandatoryConfigs>
<config>enable metrics capture</config>
</mandatoryConfigs>

<parameters>
</parameters>

<createTables>
<T>
create table ?SERVERNAME?_QPMSQL (
Timestamp     datetime not null,
Interval      int      not null,
dbname        varchar(30)  not NULL,
uid           int      not null,
id            int      not null,
hashkey       int      not null,
sequence      int      not null,
qtext	   		  varchar(255) not NULL    
) lock datapages
</T>
</createTables>

<createIndexes>
<I>
create index idx on ?SERVERNAME?_QPMSQL (Timestamp, dbname, id, hashkey)
</I>
<I>
create unique index idx on ?SERVERNAME?_QPMSQL (dbname, uid, id, hashkey) with ignore_dup_key
</I>
</createIndexes>

<purge>
<P table="?SERVERNAME?_QPMSQL" >
delete ?SERVERNAME?_QPMSQL where Timestamp &lt; ?DATE?
</P>
</purge>

</MetricDescriptor>








