<?xml version="1.0" encoding="UTF-8"?>
<MetricDescriptor>
  <metricName > RSLstCmt </metricName>
  <metricType > GENERIC </metricType>
  <SQL > <![CDATA[
set nocount on
declare @dbid int,  @dbname sysname, @rowcnt int, @cmd varchar(1024)

if object_id("#RSLstCmt") != null
  exec ("drop table #RSLstCmt")
if object_id("#db_cursor") != null
  exec ("drop table #db_cursor")
if object_id("#db_cursor_tmp") != null
  exec ("drop table #db_cursor_tmp")

create table #RSLstCmt (
    dbname            sysname       not null,
    origin            int           not null,
    origin_time       datetime      not null,
    dest_commit_time  datetime      not null,
    latency           int           not null
)
select dbid, name
into #db_cursor
from master..sysdatabases
where name not like 'tempdb%' 
and name not in ('master','model','sybsystemprocs','sybsystemdb','sybsecurity','dbccdb','dba_gdem_db','scratch_db')
and status&1   != 1   -- database upgrading
and status&32   != 32   -- database created for load
and status&64   != 64   -- database recovery
and status&256   != 256   -- database suspect
and status&4096   != 4096   -- single user
and status2&16   != 16   -- database offline
and status2&32   != 32   -- database offline
and status2&512   != 512   -- database currently upgrading
and status3&2   != 2   -- ignore proxy database
and status3&4   != 4   -- ignore has proxy database
and status3&8   != 8   -- databse in shutdown
and status3&256 != 256 -- ignore user created tempdb
and status3&8192 != 8192 -- drop database in progress
and status3&4194304 != 4194304 -- ignore archive databases
and name in (?DBLIST?)


select name into #db_cursor_tmp from #db_cursor where 1=2

set rowcount 1
select @dbid=dbid, @dbname=name from #db_cursor 
select @rowcnt=@@rowcount 
set rowcount 0 
while @rowcnt=1 
begin
	SELECT @cmd = "if object_id('"+ @dbname + "..rs_lastcommit') is not null"
	SELECT @cmd = @cmd + " begin "
	SELECT @cmd = @cmd + "insert into #db_cursor_tmp(name) values ('"+@dbname+"')"
	SELECT @cmd = @cmd + " end"
	--SELECT @cmd
	exec(@cmd)
	delete from #db_cursor where dbid = @dbid and name = @dbname
        set rowcount 1
	select @dbid=dbid, @dbname=name from #db_cursor
	select @rowcnt=@@rowcount
	set rowcount 0
end	

set rowcount 1
select @dbname=name from #db_cursor_tmp
select @rowcnt=@@rowcount
delete #db_cursor_tmp
set rowcount 0
while @rowcnt=1
begin
        exec (
        "insert into #RSLstCmt (dbname,origin, origin_time, dest_commit_time, latency)               "+
        "select '"+@dbname+"', origin, origin_time, dest_commit_time, latency=datediff(ms,  origin_time, dest_commit_time) "+
        "from "+@dbname+"..rs_lastcommit                                                                    "+
        "where origin != 0  and  origin_time IS NOT NULL and origin_time !=''"
        )
	set rowcount 1
	select @dbname=name from #db_cursor_tmp
	select @rowcnt=@@rowcount
	delete #db_cursor_tmp
	set rowcount 0
end	
set rowcount 0
select * from #RSLstCmt
where datediff(dd,origin_time,getdate())  = 0
drop table #RSLstCmt
drop table #db_cursor
drop table #db_cursor_tmp
]]>
</SQL>
  <key1 > dbname </key1>
  <key2 > origin </key2>
  <key3 >  </key3>
  <parameters>
     <param name="DBLIST"> '' </param>
  </parameters>
  <filterCol >  </filterCol>
  <delay > 60 </delay>
  <colsCalcDiff >                 
  </colsCalcDiff>
  <mandatoryConfigs>
  </mandatoryConfigs>
  <createTables>
     <T>
  create table ?SERVERNAME?_RSLstCmt (
     Timestamp         datetime not null,
     Interval          int      not null,   
     dbname            sysname  not null,
     origin            int           not null,
     origin_time       datetime      not null,
     dest_commit_time  datetime      not null,
     latency           int           not null    
  ) lock datapages
     </T>

  </createTables>

  <createIndexes>
     <I>
  create unique index idx on ?SERVERNAME?_RSLstCmt (Timestamp, dbname, origin)
     </I>
     <I>
  <!-- This next index avoid inserting the same last retrieved info when DSI is suspended or if there is no activity on the connection -->
  create unique index idx1 on ?SERVERNAME?_RSLstCmt (dbname, origin, origin_time, dest_commit_time) with ignore_dup_key
     </I>
  </createIndexes>

  <purge>
    <P table="?SERVERNAME?_RSLstCmt" >
  delete ?SERVERNAME?_RSLstCmt where Timestamp &lt; ?DATE?
    </P>
  </purge>

</MetricDescriptor>

 	  	 
